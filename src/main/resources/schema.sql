DROP TABLE IF EXISTS LIKES, RATINGS, FRIENDS, FILM_GENRE, USERS, GENRES, FILMS;

CREATE TABLE IF NOT EXISTS public.users
(
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	email varchar(200) NOT NULL,
	login varchar(50) NOT NULL,
	name varchar(200) NOT NULL,
	birthday date NOT NULL,
);

CREATE UNIQUE INDEX IF NOT EXISTS user_email_uindex ON public.users (email);
CREATE UNIQUE INDEX IF NOT EXISTS user_login_uindex ON public.users (login);

CREATE TABLE IF NOT EXISTS public.films
(
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title varchar(200) NOT NULL,
    description varchar,
    release_date date NOT NULL,
    duration integer NOT NULL,
    rating_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.genres
(
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre varchar(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.film_genre
(
    film_id integer NOT NULL REFERENCES public.films(id),
    genre_id integer NOT NULL REFERENCES public.genres(id),
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS public.friends
(
    user_id integer NOT NULL REFERENCES public.users(id),
	friend_id integer NOT NULL REFERENCES public.users(id),
	accepted boolean NOT NULL,
	PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS public.ratings
(
	id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	rating varchar(20) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.likes
(
    film_id integer NOT NULL REFERENCES public.films(id),
	user_id integer NOT NULL REFERENCES public.users(id),
	PRIMARY KEY (film_id, user_id)
);